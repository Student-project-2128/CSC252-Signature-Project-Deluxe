#include <iostream>
#include <vector>
#include <string>
#include <memory> // For std::unique_ptr

// Optional: Date struct for cleaner date handling
struct Date {
    int year;
    int month;
    int day;
};

// Base class Appointment (abstract)
class Appointment {
public:
    Appointment(const std::string& description, const Date& date)
        : description_(description), date_(date) {
    }

    virtual ~Appointment() = default; // Virtual destructor for proper cleanup

    const std::string& getDescription() const {
        return description_;
    }

    // Pure virtual function
    virtual bool occurs_on(int year, int month, int day) const = 0;

protected:
    std::string description_;
    Date date_;
};

// Derived class Day (for specific day appointments)
class Day : public Appointment {
public:
    Day(const std::string& description, const Date& date)
        : Appointment(description, date) {
    }

    bool occurs_on(int year, int month, int day) const override {
        return (date_.year == year && date_.month == month && date_.day == day);
    }
};

// Derived class Monthly (for monthly appointments)
class Monthly : public Appointment {
public:
    Monthly(const std::string& description, const Date& date)
        : Appointment(description, date) {
    }

    bool occurs_on(int year, int month, int day) const override {
        // For monthly, only day and month must match
        return (date_.day == day && date_.month == month);
    }
};

int main() {
    std::vector<std::unique_ptr<Appointment>> appointments;

    // Populate the vector with a mixture of appointments
    appointments.push_back(std::make_unique<Day>("See the dentist", Date{ 2025, 10, 15 }));
    appointments.push_back(std::make_unique<Monthly>("Pay rent", Date{ 2025, 10, 1 })); // Occurs on 1st of any month
    appointments.push_back(std::make_unique<Day>("Team meeting", Date{ 2025, 10, 20 }));
    appointments.push_back(std::make_unique<Monthly>("Gym membership renewal", Date{ 2025, 11, 5 })); // Occurs on 5th of any month
    appointments.push_back(std::make_unique<Day>("Doctor's appointment", Date{ 2025, 11, 10 }));

    int searchYear, searchMonth, searchDay;
    std::cout << "Enter date to check for appointments (year month day): ";
    std::cin >> searchYear >> searchMonth >> searchDay;

    std::cout << "\nAppointments on " << searchYear << "/" << searchMonth << "/" << searchDay << ":\n";
    bool foundAppointments = false;
    for (const auto& appPtr : appointments) {
        if (appPtr->occurs_on(searchYear, searchMonth, searchDay)) {
            std::cout << "- " << appPtr->getDescription() << std::endl;
            foundAppointments = true;
        }
    }

    if (!foundAppointments) {
        std::cout << "No appointments found on this date.\n";
    }

    return 0;
}ï»¿

